// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var VNode, VText, VTreeKup, extend, parseSelector, tag, tags, vtreeKup, _i, _len,
    __slice = [].slice;

  VNode = require('virtual-dom/vnode/vnode');

  VText = require('virtual-dom/vnode/vtext');

  extend = require('xtend/mutable');

  tags = 'html head title base link meta style script noscript template body section nav article aside h1 h2 h3 h4 h5 h6 header footer address main p hr pre blockquote ol ul li dl dt dd dd figure figcaption div a em strong small s cite q dfn abbr itl data time atetim code var samp kbd sub sup i b u mark ruby rt rp bdi bdo span las an i br wbr ins del img iframe embed object param object video audio source video audio track video audio canvas map area area map svg table caption colgroup col tbody thead tfoot tr td th form fieldset legend fieldset label input button select datalist optgroup option select datalist textarea keygen output progress meter details summary details menuitem menu'.split(/\s+/);

  parseSelector = function(selector) {
    var classes, first, i, id, result, splits;
    classes = [];
    id = null;
    first = selector[0];
    if (!(first === '.' || first === '#')) {
      return;
    }
    splits = selector.split(/([.#])/);
    i = 1;
    while (i < splits.length) {
      switch (splits[i]) {
        case '.':
          classes.push(splits[i + 1]);
          break;
        case '#':
          id = splits[i + 1];
      }
      i += 2;
    }
    result = {};
    if (classes.length > 0) {
      result.className = classes.join(' ');
    }
    if (id != null) {
      result.id = id;
    }
    return result;
  };

  VTreeKup = (function() {
    function VTreeKup(namespace) {
      this.namespace = namespace;
      this.nodesStack = [[]];
      this.nodes = [];
    }

    VTreeKup.prototype.topNodes = function() {
      return this.nodesStack[this.nodesStack.length - 1];
    };

    VTreeKup.prototype.$add = function(items) {
      var item, _i, _len, _results;
      if (!Array.isArray(items)) {
        items = [items];
      }
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _results.push(this.topNodes().push(item));
      }
      return _results;
    };

    VTreeKup.prototype.$tag = function() {
      var arg, args, children, classId, i, name, properties, text, topNodes, _i, _len;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      children = [];
      properties = {};
      text = null;
      topNodes = this.topNodes();
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        arg = args[i];
        switch (typeof arg) {
          case 'function':
            this.nodesStack.push([]);
            arg();
            children.push.apply(children, this.nodesStack.pop());
            break;
          case 'object':
            extend(properties, arg);
            break;
          case 'number':
          case 'boolean':
            children.push(new VText(String(arg)));
            break;
          case 'string':
            if (args.length !== 1 && i === 0 && ((classId = parseSelector(arg)) != null)) {
              extend(properties, classId);
            } else {
              children.push(new VText(arg));
            }
        }
      }
      return topNodes.push(new VNode(name, properties, children, null, this.namespace));
    };

    VTreeKup.addTag = function(tag) {
      return this.prototype[tag] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.$tag.apply(this, [tag].concat(__slice.call(args)));
      };
    };

    return VTreeKup;

  })();

  for (_i = 0, _len = tags.length; _i < _len; _i++) {
    tag = tags[_i];
    VTreeKup.addTag(tag);
  }

  vtreeKup = function(block) {
    var k, nodes;
    k = new VTreeKup(null);
    block(k);
    nodes = k.topNodes();
    if (nodes.length >= 2) {
      throw new Error('cannot create multiple root nodes');
    }
    return nodes[0];
  };

  vtreeKup.addTag = function(tag) {
    return VTreeKup.addTag(tag);
  };

  module.exports = vtreeKup;

}).call(this);
